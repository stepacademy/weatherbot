//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.MessageConveyorServiceReference {
    using System.Runtime.Serialization;
    using System.ServiceModel;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InteractionMode", Namespace="http://schemas.datacontract.org/2004/07/WeatherBot.MessagesConveyor.TeleInteracti" +
        "on.InteractionStrategy")]
    public enum InteractionMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetUpdatesBased = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebHookBased = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageConveyorServiceReference.IManagementContract")]
    public interface IManagementContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagementContract/Start", ReplyAction="http://tempuri.org/IManagementContract/StartResponse")]
        void Start(string botTokenPath, Test.MessageConveyorServiceReference.InteractionMode iMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagementContract/Start", ReplyAction="http://tempuri.org/IManagementContract/StartResponse")]
        System.Threading.Tasks.Task StartAsync(string botTokenPath, Test.MessageConveyorServiceReference.InteractionMode iMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagementContract/Stop", ReplyAction="http://tempuri.org/IManagementContract/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagementContract/Stop", ReplyAction="http://tempuri.org/IManagementContract/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagementContractChannel : Test.MessageConveyorServiceReference.IManagementContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagementContractClient : System.ServiceModel.ClientBase<Test.MessageConveyorServiceReference.IManagementContract>, Test.MessageConveyorServiceReference.IManagementContract {
        private InstanceContext instanceContext;

        public ManagementContractClient() {
        }

        public ManagementContractClient(InstanceContext instanceContext) {
            this.instanceContext = instanceContext;
        }

        public ManagementContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManagementContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagementContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagementContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Start(string botTokenPath, Test.MessageConveyorServiceReference.InteractionMode iMode) {
            base.Channel.Start(botTokenPath, iMode);
        }
        
        public System.Threading.Tasks.Task StartAsync(string botTokenPath, Test.MessageConveyorServiceReference.InteractionMode iMode) {
            return base.Channel.StartAsync(botTokenPath, iMode);
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
    }
}
