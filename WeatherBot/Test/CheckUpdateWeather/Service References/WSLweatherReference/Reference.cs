//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace Test.CheckUpdateWeather.Service_References.WSLweatherReference {
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="QDataWeatherDay", Namespace="http://schemas.datacontract.org/2004/07/WeatherBot.WSLweather")]
    [Serializable()]
    public partial class QDataWeatherDay : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private QDataWeatherDayPart[] ItemsPartsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public QDataWeatherDayPart[] ItemsParts {
            get {
                return this.ItemsPartsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsPartsField, value) != true)) {
                    this.ItemsPartsField = value;
                    this.RaisePropertyChanged("ItemsParts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="QDataWeatherDayPart", Namespace="http://schemas.datacontract.org/2004/07/WeatherBot.WSLweather")]
    [Serializable()]
    public partial class QDataWeatherDayPart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string DayPartField;
        
        [OptionalField()]
        private string StateField;
        
        [OptionalField()]
        private double TempField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string DayPart {
            get {
                return this.DayPartField;
            }
            set {
                if ((object.ReferenceEquals(this.DayPartField, value) != true)) {
                    this.DayPartField = value;
                    this.RaisePropertyChanged("DayPart");
                }
            }
        }
        
        [DataMember()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [DataMember()]
        public double Temp {
            get {
                return this.TempField;
            }
            set {
                if ((this.TempField.Equals(value) != true)) {
                    this.TempField = value;
                    this.RaisePropertyChanged("Temp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSLweatherReference.IWeather")]
    public interface IWeather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/GetDataWeatherDay", ReplyAction="http://tempuri.org/IWeather/GetDataWeatherDayResponse")]
        QDataWeatherDay GetDataWeatherDay(System.DateTime dataTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/GetDataWeatherDay", ReplyAction="http://tempuri.org/IWeather/GetDataWeatherDayResponse")]
        System.Threading.Tasks.Task<QDataWeatherDay> GetDataWeatherDayAsync(System.DateTime dataTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/GetWeatherDay", ReplyAction="http://tempuri.org/IWeather/GetWeatherDayResponse")]
        QDataWeatherDay GetWeatherDay(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/GetWeatherDay", ReplyAction="http://tempuri.org/IWeather/GetWeatherDayResponse")]
        System.Threading.Tasks.Task<QDataWeatherDay> GetWeatherDayAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWeather/UpdateCities")]
        void UpdateCities();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWeather/UpdateCities")]
        System.Threading.Tasks.Task UpdateCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWeather/UpdateWeather")]
        void UpdateWeather();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWeather/UpdateWeather")]
        System.Threading.Tasks.Task UpdateWeatherAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherChannel : IWeather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherClient : System.ServiceModel.ClientBase<IWeather>, IWeather {
        
        public WeatherClient() {
        }
        
        public WeatherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public QDataWeatherDay GetDataWeatherDay(System.DateTime dataTime) {
            return base.Channel.GetDataWeatherDay(dataTime);
        }
        
        public System.Threading.Tasks.Task<QDataWeatherDay> GetDataWeatherDayAsync(System.DateTime dataTime) {
            return base.Channel.GetDataWeatherDayAsync(dataTime);
        }
        
        public QDataWeatherDay GetWeatherDay(string city) {
            return base.Channel.GetWeatherDay(city);
        }
        
        public System.Threading.Tasks.Task<QDataWeatherDay> GetWeatherDayAsync(string city) {
            return base.Channel.GetWeatherDayAsync(city);
        }
        
        public void UpdateCities() {
            base.Channel.UpdateCities();
        }
        
        public System.Threading.Tasks.Task UpdateCitiesAsync() {
            return base.Channel.UpdateCitiesAsync();
        }
        
        public void UpdateWeather() {
            base.Channel.UpdateWeather();
        }
        
        public System.Threading.Tasks.Task UpdateWeatherAsync() {
            return base.Channel.UpdateWeatherAsync();
        }
    }
}
